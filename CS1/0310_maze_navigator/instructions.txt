NOTE:

Maze navigator becomes an important capstone. It should be a big project that students discuss and prepare for on paper. They should start by begin given a variety of mazes on paper that represent the mazes they will be faced with. They should also be given a list of available functions and should discuss how to combine them together.

Start students off with a discussion like this:
I have an x,y coordinate and a set of goal x,y coordinates. How do I make my x,y become the goal? One way is this:
x = goal_x
y = goal_y
This would teleport me to the goal. Effective, but not what we're looking for.
What if I can only change my x and y value by one?
Then I have to try something like:
if x < goal_x:
	x = x + 1
...and so on



PRE:


PROJECT:
Fill in the code for the goToGoal function in action.py to enable the MazeRunner to navigate all 10 mazes.

Use some or all of the following functions to get the Maze Runner to the goal.

	runner.moveAhead(maze)

    runner.turnLeft()

    runner.turnRight()

    runner.setHeading(north) #or south, east, west

    #This function returns true if there is a wall ahead.
    runner.wallAhead(maze)

    #Returns the manhattan distance from the runner to the goal.
    runner.distanceToGoal(goal_row, goal_col)


	You should also consider using if statements to check which direction you need to move. For instance:
	#Check if the goal is to the north. If so, head that direction.
	if goal_row < runner.row:
		runner.setHeading(north)

    ADVANCED: The maze runner also has a limited amount of memory. If you
    need the runner to remember something you can put the information in
    one of the following variables like so:
    runner.memory0 = False
    runner.memory1 = "Been here before"
    up to
    runner.memory9
    This is not necessary, but may be useful on mazes 7 and 8, which are
    very challenging.

There is also a built in list object that can be used.
    	runner.memorylist.append( (runner.col,runner.row) )

You will need to consider how to navigate a variety of types of mazes. I recommend writing one strategy that works on some mazes and a different strategy that works on other mazes and then thinking about how to combine the two.

Mazes 7 and 8 are the most challenging. Save them for last.


PROJECT RUBRIC:
2 points each for each trial that your maze runner passes.
IN THE FUTURE GRADE BASED ON THEIR EFFORT AND CLASS PARTICIPATION. NOT ON HOW MANY MAZES THEY COMPLETE.


POST:
Debreif different student programs and discuss their relative merits.
