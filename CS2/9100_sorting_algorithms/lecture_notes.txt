
Sorting
what you should know
-How to evaluate the contents of a list after a few operations of sorting-like code. Things like loops, if statements, and swaps or inserts. Parititions.
-Be able to define what a "divide and conquer" algorithm is.
-Understand "Big O" notation by applying the "Big O" operation. ie O(7x^3+2x^2+x)=x^3
-Be able to count comparisons in short runs of bubble, insertion, or quicksort.

#Why is the online code able to loop to n-i-1 instead of n-1?
#https://www.geeksforgeeks.org/python-program-for-bubble-sort/
#Because bubblesort percolates the next largest value up to the end of the list on each pass.

#Discuss collision efficiency alongside the sorting part of the class. Make a Diepio video showing the sorting code.

#Lecture on the following:
#Some question about this partition function like the tradeoff between readability and memory usage, also the meaning of in-place:
#https://www.geeksforgeeks.org/python-program-for-quicksort/

'''
Neal's explanation of this partition function:
High value is arbitrarily chosen as the pivot.
i is the index of the partition.
Loop once over the values to be partitioned. Whenever 
the value being looped over is less than the pivot, swap it into
the i position and increment i so that the lower half
of the split grows and i stays at the border between
the splits.
Finally at the end, put the pivot into its final location
and return the index of the pivot. so the upper and lower
halves can be partitioned.
'''
# This function takes last element as pivot, places 
# the pivot element at its correct position in sorted 
# array, and places all smaller (smaller than pivot) 
# to left of pivot and all greater elements to right 
# of pivot 
def partition(arr,low,high): 
    i = ( low-1 )         # index of smaller element 
    pivot = arr[high] # make pivot the value of the high element
    for j in range(low , high):
        # If current element is smaller than or 
        # equal to pivot 
        if arr[j] <= pivot:
            # increment index of smaller element 
            i = i+1
            swap(arr,i,j)
    swap(arr,i+1,high)
    return ( i+1 )
  
# The main function that implements QuickSort 
# arr[] --> Array to be sorted, 
# low  --> Starting index, 
# high  --> Ending index
# Function to do Quick sort
def quickSort(arr,low,high):
    if low < high:
        # pi is partitioning index, arr[p] is now
        # at right place
        pi = partition(arr,low,high)
        # Separately sort elements before
        # partition and after partition
        quickSort(arr, low, pi-1)
        quickSort(arr, pi+1, high)

# Driver code to test above
arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
quickSort(arr,0,n-1)
print ("Sorted array is:",arr)
  
# This code is contributed by Mohit Kumra 

You should lecture about merge sort since it is an example of a not -in-place sorting algorithm.

in-place sort. Definition: A sort algorithm in which the sorted items occupy the same storage as the original ones. At most a constant number of items are kept in auxiliary memory at any time.

